// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

uint256 constant _tableId = uint256(bytes32(abi.encodePacked(bytes16(""), bytes16("GameTable"))));
uint256 constant GameTableTableId = _tableId;

struct GameTableData {
  uint16 id;
  address creator;
  uint16 round;
  uint16 numBots;
  uint16 alive;
}

library GameTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT16;
    _schema[1] = SchemaType.ADDRESS;
    _schema[2] = SchemaType.UINT16;
    _schema[3] = SchemaType.UINT16;
    _schema[4] = SchemaType.UINT16;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT16;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "id";
    _fieldNames[1] = "creator";
    _fieldNames[2] = "round";
    _fieldNames[3] = "numBots";
    _fieldNames[4] = "alive";
    return ("GameTable", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get id */
  function getId(uint16 gameID) internal view returns (uint16 id) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get id (using the specified store) */
  function getId(IStore _store, uint16 gameID) internal view returns (uint16 id) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set id */
  function setId(uint16 gameID, uint16 id) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked((id)));
  }

  /** Set id (using the specified store) */
  function setId(IStore _store, uint16 gameID, uint16 id) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked((id)));
  }

  /** Get creator */
  function getCreator(uint16 gameID) internal view returns (address creator) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get creator (using the specified store) */
  function getCreator(IStore _store, uint16 gameID) internal view returns (address creator) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 1);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set creator */
  function setCreator(uint16 gameID, address creator) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    StoreSwitch.setField(_tableId, _primaryKeys, 1, abi.encodePacked((creator)));
  }

  /** Set creator (using the specified store) */
  function setCreator(IStore _store, uint16 gameID, address creator) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    _store.setField(_tableId, _primaryKeys, 1, abi.encodePacked((creator)));
  }

  /** Get round */
  function getRound(uint16 gameID) internal view returns (uint16 round) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get round (using the specified store) */
  function getRound(IStore _store, uint16 gameID) internal view returns (uint16 round) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 2);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set round */
  function setRound(uint16 gameID, uint16 round) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    StoreSwitch.setField(_tableId, _primaryKeys, 2, abi.encodePacked((round)));
  }

  /** Set round (using the specified store) */
  function setRound(IStore _store, uint16 gameID, uint16 round) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    _store.setField(_tableId, _primaryKeys, 2, abi.encodePacked((round)));
  }

  /** Get numBots */
  function getNumBots(uint16 gameID) internal view returns (uint16 numBots) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 3);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get numBots (using the specified store) */
  function getNumBots(IStore _store, uint16 gameID) internal view returns (uint16 numBots) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 3);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set numBots */
  function setNumBots(uint16 gameID, uint16 numBots) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    StoreSwitch.setField(_tableId, _primaryKeys, 3, abi.encodePacked((numBots)));
  }

  /** Set numBots (using the specified store) */
  function setNumBots(IStore _store, uint16 gameID, uint16 numBots) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    _store.setField(_tableId, _primaryKeys, 3, abi.encodePacked((numBots)));
  }

  /** Get alive */
  function getAlive(uint16 gameID) internal view returns (uint16 alive) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 4);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get alive (using the specified store) */
  function getAlive(IStore _store, uint16 gameID) internal view returns (uint16 alive) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 4);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set alive */
  function setAlive(uint16 gameID, uint16 alive) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    StoreSwitch.setField(_tableId, _primaryKeys, 4, abi.encodePacked((alive)));
  }

  /** Set alive (using the specified store) */
  function setAlive(IStore _store, uint16 gameID, uint16 alive) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    _store.setField(_tableId, _primaryKeys, 4, abi.encodePacked((alive)));
  }

  /** Get the full data */
  function get(uint16 gameID) internal view returns (GameTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint16 gameID) internal view returns (GameTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    bytes memory _blob = _store.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint16 gameID, uint16 id, address creator, uint16 round, uint16 numBots, uint16 alive) internal {
    bytes memory _data = encode(id, creator, round, numBots, alive);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint16 gameID,
    uint16 id,
    address creator,
    uint16 round,
    uint16 numBots,
    uint16 alive
  ) internal {
    bytes memory _data = encode(id, creator, round, numBots, alive);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    _store.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct */
  function set(uint16 gameID, GameTableData memory _table) internal {
    set(gameID, _table.id, _table.creator, _table.round, _table.numBots, _table.alive);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint16 gameID, GameTableData memory _table) internal {
    set(_store, gameID, _table.id, _table.creator, _table.round, _table.numBots, _table.alive);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (GameTableData memory _table) {
    _table.id = (uint16(Bytes.slice2(_blob, 0)));

    _table.creator = (address(Bytes.slice20(_blob, 2)));

    _table.round = (uint16(Bytes.slice2(_blob, 22)));

    _table.numBots = (uint16(Bytes.slice2(_blob, 24)));

    _table.alive = (uint16(Bytes.slice2(_blob, 26)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint16 id,
    address creator,
    uint16 round,
    uint16 numBots,
    uint16 alive
  ) internal view returns (bytes memory) {
    return abi.encodePacked(id, creator, round, numBots, alive);
  }

  /* Delete all data for given keys */
  function deleteRecord(uint16 gameID) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint16 gameID) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((gameID)));

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}
