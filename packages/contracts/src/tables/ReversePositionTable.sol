// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

uint256 constant _tableId = uint256(bytes32(abi.encodePacked(bytes16(""), bytes16("reversePosition"))));
uint256 constant ReversePositionTableTableId = _tableId;

library ReversePositionTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.ADDRESS;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.UINT16;
    _schema[1] = SchemaType.UINT16;
    _schema[2] = SchemaType.UINT16;
    _schema[3] = SchemaType.UINT16;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](1);
    _fieldNames[0] = "bot";
    return ("ReversePositionTable", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get bot */
  function get(uint16 x, uint16 y, uint16 game, uint16 round) internal view returns (address bot) {
    bytes32[] memory _primaryKeys = new bytes32[](4);
    _primaryKeys[0] = bytes32(uint256((x)));
    _primaryKeys[1] = bytes32(uint256((y)));
    _primaryKeys[2] = bytes32(uint256((game)));
    _primaryKeys[3] = bytes32(uint256((round)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get bot (using the specified store) */
  function get(IStore _store, uint16 x, uint16 y, uint16 game, uint16 round) internal view returns (address bot) {
    bytes32[] memory _primaryKeys = new bytes32[](4);
    _primaryKeys[0] = bytes32(uint256((x)));
    _primaryKeys[1] = bytes32(uint256((y)));
    _primaryKeys[2] = bytes32(uint256((game)));
    _primaryKeys[3] = bytes32(uint256((round)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set bot */
  function set(uint16 x, uint16 y, uint16 game, uint16 round, address bot) internal {
    bytes32[] memory _primaryKeys = new bytes32[](4);
    _primaryKeys[0] = bytes32(uint256((x)));
    _primaryKeys[1] = bytes32(uint256((y)));
    _primaryKeys[2] = bytes32(uint256((game)));
    _primaryKeys[3] = bytes32(uint256((round)));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked((bot)));
  }

  /** Set bot (using the specified store) */
  function set(IStore _store, uint16 x, uint16 y, uint16 game, uint16 round, address bot) internal {
    bytes32[] memory _primaryKeys = new bytes32[](4);
    _primaryKeys[0] = bytes32(uint256((x)));
    _primaryKeys[1] = bytes32(uint256((y)));
    _primaryKeys[2] = bytes32(uint256((game)));
    _primaryKeys[3] = bytes32(uint256((round)));

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked((bot)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(address bot) internal view returns (bytes memory) {
    return abi.encodePacked(bot);
  }

  /* Delete all data for given keys */
  function deleteRecord(uint16 x, uint16 y, uint16 game, uint16 round) internal {
    bytes32[] memory _primaryKeys = new bytes32[](4);
    _primaryKeys[0] = bytes32(uint256((x)));
    _primaryKeys[1] = bytes32(uint256((y)));
    _primaryKeys[2] = bytes32(uint256((game)));
    _primaryKeys[3] = bytes32(uint256((round)));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint16 x, uint16 y, uint16 game, uint16 round) internal {
    bytes32[] memory _primaryKeys = new bytes32[](4);
    _primaryKeys[0] = bytes32(uint256((x)));
    _primaryKeys[1] = bytes32(uint256((y)));
    _primaryKeys[2] = bytes32(uint256((game)));
    _primaryKeys[3] = bytes32(uint256((round)));

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}
