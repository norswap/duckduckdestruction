// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { ActionType, Direction } from "./../Types.sol";

uint256 constant _tableId = uint256(bytes32(abi.encodePacked(bytes16(""), bytes16("action"))));
uint256 constant ActionTableTableId = _tableId;

struct ActionTableData {
  ActionType actionType;
  Direction direction;
  address target;
}

library ActionTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.ADDRESS;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.UINT16;
    _schema[2] = SchemaType.UINT16;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "actionType";
    _fieldNames[1] = "direction";
    _fieldNames[2] = "target";
    return ("ActionTable", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get actionType */
  function getActionType(address bot, uint16 game, uint16 round) internal view returns (ActionType actionType) {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return ActionType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get actionType (using the specified store) */
  function getActionType(
    IStore _store,
    address bot,
    uint16 game,
    uint16 round
  ) internal view returns (ActionType actionType) {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return ActionType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set actionType */
  function setActionType(address bot, uint16 game, uint16 round, ActionType actionType) internal {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked(uint8(actionType)));
  }

  /** Set actionType (using the specified store) */
  function setActionType(IStore _store, address bot, uint16 game, uint16 round, ActionType actionType) internal {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked(uint8(actionType)));
  }

  /** Get direction */
  function getDirection(address bot, uint16 game, uint16 round) internal view returns (Direction direction) {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return Direction(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get direction (using the specified store) */
  function getDirection(
    IStore _store,
    address bot,
    uint16 game,
    uint16 round
  ) internal view returns (Direction direction) {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 1);
    return Direction(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set direction */
  function setDirection(address bot, uint16 game, uint16 round, Direction direction) internal {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    StoreSwitch.setField(_tableId, _primaryKeys, 1, abi.encodePacked(uint8(direction)));
  }

  /** Set direction (using the specified store) */
  function setDirection(IStore _store, address bot, uint16 game, uint16 round, Direction direction) internal {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    _store.setField(_tableId, _primaryKeys, 1, abi.encodePacked(uint8(direction)));
  }

  /** Get target */
  function getTarget(address bot, uint16 game, uint16 round) internal view returns (address target) {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get target (using the specified store) */
  function getTarget(IStore _store, address bot, uint16 game, uint16 round) internal view returns (address target) {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 2);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set target */
  function setTarget(address bot, uint16 game, uint16 round, address target) internal {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    StoreSwitch.setField(_tableId, _primaryKeys, 2, abi.encodePacked((target)));
  }

  /** Set target (using the specified store) */
  function setTarget(IStore _store, address bot, uint16 game, uint16 round, address target) internal {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    _store.setField(_tableId, _primaryKeys, 2, abi.encodePacked((target)));
  }

  /** Get the full data */
  function get(address bot, uint16 game, uint16 round) internal view returns (ActionTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    address bot,
    uint16 game,
    uint16 round
  ) internal view returns (ActionTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    bytes memory _blob = _store.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    address bot,
    uint16 game,
    uint16 round,
    ActionType actionType,
    Direction direction,
    address target
  ) internal {
    bytes memory _data = encode(actionType, direction, target);

    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    address bot,
    uint16 game,
    uint16 round,
    ActionType actionType,
    Direction direction,
    address target
  ) internal {
    bytes memory _data = encode(actionType, direction, target);

    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    _store.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct */
  function set(address bot, uint16 game, uint16 round, ActionTableData memory _table) internal {
    set(bot, game, round, _table.actionType, _table.direction, _table.target);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, address bot, uint16 game, uint16 round, ActionTableData memory _table) internal {
    set(_store, bot, game, round, _table.actionType, _table.direction, _table.target);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (ActionTableData memory _table) {
    _table.actionType = ActionType(uint8(Bytes.slice1(_blob, 0)));

    _table.direction = Direction(uint8(Bytes.slice1(_blob, 1)));

    _table.target = (address(Bytes.slice20(_blob, 2)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(ActionType actionType, Direction direction, address target) internal view returns (bytes memory) {
    return abi.encodePacked(actionType, direction, target);
  }

  /* Delete all data for given keys */
  function deleteRecord(address bot, uint16 game, uint16 round) internal {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, address bot, uint16 game, uint16 round) internal {
    bytes32[] memory _primaryKeys = new bytes32[](3);
    _primaryKeys[0] = bytes32(bytes20((bot)));
    _primaryKeys[1] = bytes32(uint256((game)));
    _primaryKeys[2] = bytes32(uint256((round)));

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}
