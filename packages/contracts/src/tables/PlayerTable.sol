// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

uint256 constant _tableId = uint256(bytes32(abi.encodePacked(bytes16(""), bytes16("player"))));
uint256 constant PlayerTableTableId = _tableId;

struct PlayerTableData {
  uint16 health;
  uint16 ammo;
  uint16 rockets;
  uint16 lastDash;
  uint8 charge;
}

library PlayerTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT16;
    _schema[1] = SchemaType.UINT16;
    _schema[2] = SchemaType.UINT16;
    _schema[3] = SchemaType.UINT16;
    _schema[4] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "health";
    _fieldNames[1] = "ammo";
    _fieldNames[2] = "rockets";
    _fieldNames[3] = "lastDash";
    _fieldNames[4] = "charge";
    return ("PlayerTable", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get health */
  function getHealth(bytes32 key) internal view returns (uint16 health) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get health (using the specified store) */
  function getHealth(IStore _store, bytes32 key) internal view returns (uint16 health) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set health */
  function setHealth(bytes32 key, uint16 health) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked((health)));
  }

  /** Set health (using the specified store) */
  function setHealth(IStore _store, bytes32 key, uint16 health) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked((health)));
  }

  /** Get ammo */
  function getAmmo(bytes32 key) internal view returns (uint16 ammo) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get ammo (using the specified store) */
  function getAmmo(IStore _store, bytes32 key) internal view returns (uint16 ammo) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 1);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set ammo */
  function setAmmo(bytes32 key, uint16 ammo) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 1, abi.encodePacked((ammo)));
  }

  /** Set ammo (using the specified store) */
  function setAmmo(IStore _store, bytes32 key, uint16 ammo) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 1, abi.encodePacked((ammo)));
  }

  /** Get rockets */
  function getRockets(bytes32 key) internal view returns (uint16 rockets) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get rockets (using the specified store) */
  function getRockets(IStore _store, bytes32 key) internal view returns (uint16 rockets) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 2);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set rockets */
  function setRockets(bytes32 key, uint16 rockets) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 2, abi.encodePacked((rockets)));
  }

  /** Set rockets (using the specified store) */
  function setRockets(IStore _store, bytes32 key, uint16 rockets) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 2, abi.encodePacked((rockets)));
  }

  /** Get lastDash */
  function getLastDash(bytes32 key) internal view returns (uint16 lastDash) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 3);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get lastDash (using the specified store) */
  function getLastDash(IStore _store, bytes32 key) internal view returns (uint16 lastDash) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 3);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set lastDash */
  function setLastDash(bytes32 key, uint16 lastDash) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 3, abi.encodePacked((lastDash)));
  }

  /** Set lastDash (using the specified store) */
  function setLastDash(IStore _store, bytes32 key, uint16 lastDash) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 3, abi.encodePacked((lastDash)));
  }

  /** Get charge */
  function getCharge(bytes32 key) internal view returns (uint8 charge) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get charge (using the specified store) */
  function getCharge(IStore _store, bytes32 key) internal view returns (uint8 charge) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set charge */
  function setCharge(bytes32 key, uint8 charge) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 4, abi.encodePacked((charge)));
  }

  /** Set charge (using the specified store) */
  function setCharge(IStore _store, bytes32 key, uint8 charge) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 4, abi.encodePacked((charge)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (PlayerTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (PlayerTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(bytes32 key, uint16 health, uint16 ammo, uint16 rockets, uint16 lastDash, uint8 charge) internal {
    bytes memory _data = encode(health, ammo, rockets, lastDash, charge);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    uint16 health,
    uint16 ammo,
    uint16 rockets,
    uint16 lastDash,
    uint8 charge
  ) internal {
    bytes memory _data = encode(health, ammo, rockets, lastDash, charge);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, PlayerTableData memory _table) internal {
    set(key, _table.health, _table.ammo, _table.rockets, _table.lastDash, _table.charge);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, PlayerTableData memory _table) internal {
    set(_store, key, _table.health, _table.ammo, _table.rockets, _table.lastDash, _table.charge);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (PlayerTableData memory _table) {
    _table.health = (uint16(Bytes.slice2(_blob, 0)));

    _table.ammo = (uint16(Bytes.slice2(_blob, 2)));

    _table.rockets = (uint16(Bytes.slice2(_blob, 4)));

    _table.lastDash = (uint16(Bytes.slice2(_blob, 6)));

    _table.charge = (uint8(Bytes.slice1(_blob, 8)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint16 health,
    uint16 ammo,
    uint16 rockets,
    uint16 lastDash,
    uint8 charge
  ) internal view returns (bytes memory) {
    return abi.encodePacked(health, ammo, rockets, lastDash, charge);
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}
